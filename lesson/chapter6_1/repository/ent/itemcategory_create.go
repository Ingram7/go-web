// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-web/lesson/chapter6_1/repository/ent/item"
	"go-web/lesson/chapter6_1/repository/ent/itemcategory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ItemCategoryCreate is the builder for creating a ItemCategory entity.
type ItemCategoryCreate struct {
	config
	mutation *ItemCategoryMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (icc *ItemCategoryCreate) SetCreateTime(t time.Time) *ItemCategoryCreate {
	icc.mutation.SetCreateTime(t)
	return icc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (icc *ItemCategoryCreate) SetNillableCreateTime(t *time.Time) *ItemCategoryCreate {
	if t != nil {
		icc.SetCreateTime(*t)
	}
	return icc
}

// SetUpdateTime sets the "update_time" field.
func (icc *ItemCategoryCreate) SetUpdateTime(t time.Time) *ItemCategoryCreate {
	icc.mutation.SetUpdateTime(t)
	return icc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (icc *ItemCategoryCreate) SetNillableUpdateTime(t *time.Time) *ItemCategoryCreate {
	if t != nil {
		icc.SetUpdateTime(*t)
	}
	return icc
}

// SetName sets the "name" field.
func (icc *ItemCategoryCreate) SetName(s string) *ItemCategoryCreate {
	icc.mutation.SetName(s)
	return icc
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (icc *ItemCategoryCreate) AddItemIDs(ids ...int) *ItemCategoryCreate {
	icc.mutation.AddItemIDs(ids...)
	return icc
}

// AddItems adds the "items" edges to the Item entity.
func (icc *ItemCategoryCreate) AddItems(i ...*Item) *ItemCategoryCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icc.AddItemIDs(ids...)
}

// Mutation returns the ItemCategoryMutation object of the builder.
func (icc *ItemCategoryCreate) Mutation() *ItemCategoryMutation {
	return icc.mutation
}

// Save creates the ItemCategory in the database.
func (icc *ItemCategoryCreate) Save(ctx context.Context) (*ItemCategory, error) {
	var (
		err  error
		node *ItemCategory
	)
	icc.defaults()
	if len(icc.hooks) == 0 {
		if err = icc.check(); err != nil {
			return nil, err
		}
		node, err = icc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = icc.check(); err != nil {
				return nil, err
			}
			icc.mutation = mutation
			if node, err = icc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(icc.hooks) - 1; i >= 0; i-- {
			if icc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = icc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, icc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (icc *ItemCategoryCreate) SaveX(ctx context.Context) *ItemCategory {
	v, err := icc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icc *ItemCategoryCreate) Exec(ctx context.Context) error {
	_, err := icc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icc *ItemCategoryCreate) ExecX(ctx context.Context) {
	if err := icc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icc *ItemCategoryCreate) defaults() {
	if _, ok := icc.mutation.CreateTime(); !ok {
		v := itemcategory.DefaultCreateTime()
		icc.mutation.SetCreateTime(v)
	}
	if _, ok := icc.mutation.UpdateTime(); !ok {
		v := itemcategory.DefaultUpdateTime()
		icc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (icc *ItemCategoryCreate) check() error {
	if _, ok := icc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := icc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := icc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	return nil
}

func (icc *ItemCategoryCreate) sqlSave(ctx context.Context) (*ItemCategory, error) {
	_node, _spec := icc.createSpec()
	if err := sqlgraph.CreateNode(ctx, icc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (icc *ItemCategoryCreate) createSpec() (*ItemCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &ItemCategory{config: icc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: itemcategory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemcategory.FieldID,
			},
		}
	)
	if value, ok := icc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemcategory.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := icc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemcategory.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := icc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldName,
		})
		_node.Name = value
	}
	if nodes := icc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemsTable,
			Columns: []string{itemcategory.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ItemCategoryCreateBulk is the builder for creating many ItemCategory entities in bulk.
type ItemCategoryCreateBulk struct {
	config
	builders []*ItemCategoryCreate
}

// Save creates the ItemCategory entities in the database.
func (iccb *ItemCategoryCreateBulk) Save(ctx context.Context) ([]*ItemCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iccb.builders))
	nodes := make([]*ItemCategory, len(iccb.builders))
	mutators := make([]Mutator, len(iccb.builders))
	for i := range iccb.builders {
		func(i int, root context.Context) {
			builder := iccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iccb *ItemCategoryCreateBulk) SaveX(ctx context.Context) []*ItemCategory {
	v, err := iccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iccb *ItemCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := iccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccb *ItemCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := iccb.Exec(ctx); err != nil {
		panic(err)
	}
}
