// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-web/lesson/chapter6_1/repository/ent/item"
	"go-web/lesson/chapter6_1/repository/ent/itemcategory"
	"go-web/lesson/chapter6_1/repository/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ItemCategoryUpdate is the builder for updating ItemCategory entities.
type ItemCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *ItemCategoryMutation
}

// Where appends a list predicates to the ItemCategoryUpdate builder.
func (icu *ItemCategoryUpdate) Where(ps ...predicate.ItemCategory) *ItemCategoryUpdate {
	icu.mutation.Where(ps...)
	return icu
}

// SetName sets the "name" field.
func (icu *ItemCategoryUpdate) SetName(s string) *ItemCategoryUpdate {
	icu.mutation.SetName(s)
	return icu
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (icu *ItemCategoryUpdate) AddItemIDs(ids ...int) *ItemCategoryUpdate {
	icu.mutation.AddItemIDs(ids...)
	return icu
}

// AddItems adds the "items" edges to the Item entity.
func (icu *ItemCategoryUpdate) AddItems(i ...*Item) *ItemCategoryUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icu.AddItemIDs(ids...)
}

// Mutation returns the ItemCategoryMutation object of the builder.
func (icu *ItemCategoryUpdate) Mutation() *ItemCategoryMutation {
	return icu.mutation
}

// ClearItems clears all "items" edges to the Item entity.
func (icu *ItemCategoryUpdate) ClearItems() *ItemCategoryUpdate {
	icu.mutation.ClearItems()
	return icu
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (icu *ItemCategoryUpdate) RemoveItemIDs(ids ...int) *ItemCategoryUpdate {
	icu.mutation.RemoveItemIDs(ids...)
	return icu
}

// RemoveItems removes "items" edges to Item entities.
func (icu *ItemCategoryUpdate) RemoveItems(i ...*Item) *ItemCategoryUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icu.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (icu *ItemCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	icu.defaults()
	if len(icu.hooks) == 0 {
		affected, err = icu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			icu.mutation = mutation
			affected, err = icu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(icu.hooks) - 1; i >= 0; i-- {
			if icu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = icu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, icu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (icu *ItemCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := icu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (icu *ItemCategoryUpdate) Exec(ctx context.Context) error {
	_, err := icu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icu *ItemCategoryUpdate) ExecX(ctx context.Context) {
	if err := icu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icu *ItemCategoryUpdate) defaults() {
	if _, ok := icu.mutation.UpdateTime(); !ok {
		v := itemcategory.UpdateDefaultUpdateTime()
		icu.mutation.SetUpdateTime(v)
	}
}

func (icu *ItemCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemcategory.Table,
			Columns: itemcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemcategory.FieldID,
			},
		},
	}
	if ps := icu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemcategory.FieldUpdateTime,
		})
	}
	if value, ok := icu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldName,
		})
	}
	if icu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemsTable,
			Columns: []string{itemcategory.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !icu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemsTable,
			Columns: []string{itemcategory.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemsTable,
			Columns: []string{itemcategory.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, icu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ItemCategoryUpdateOne is the builder for updating a single ItemCategory entity.
type ItemCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemCategoryMutation
}

// SetName sets the "name" field.
func (icuo *ItemCategoryUpdateOne) SetName(s string) *ItemCategoryUpdateOne {
	icuo.mutation.SetName(s)
	return icuo
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (icuo *ItemCategoryUpdateOne) AddItemIDs(ids ...int) *ItemCategoryUpdateOne {
	icuo.mutation.AddItemIDs(ids...)
	return icuo
}

// AddItems adds the "items" edges to the Item entity.
func (icuo *ItemCategoryUpdateOne) AddItems(i ...*Item) *ItemCategoryUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icuo.AddItemIDs(ids...)
}

// Mutation returns the ItemCategoryMutation object of the builder.
func (icuo *ItemCategoryUpdateOne) Mutation() *ItemCategoryMutation {
	return icuo.mutation
}

// ClearItems clears all "items" edges to the Item entity.
func (icuo *ItemCategoryUpdateOne) ClearItems() *ItemCategoryUpdateOne {
	icuo.mutation.ClearItems()
	return icuo
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (icuo *ItemCategoryUpdateOne) RemoveItemIDs(ids ...int) *ItemCategoryUpdateOne {
	icuo.mutation.RemoveItemIDs(ids...)
	return icuo
}

// RemoveItems removes "items" edges to Item entities.
func (icuo *ItemCategoryUpdateOne) RemoveItems(i ...*Item) *ItemCategoryUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icuo.RemoveItemIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (icuo *ItemCategoryUpdateOne) Select(field string, fields ...string) *ItemCategoryUpdateOne {
	icuo.fields = append([]string{field}, fields...)
	return icuo
}

// Save executes the query and returns the updated ItemCategory entity.
func (icuo *ItemCategoryUpdateOne) Save(ctx context.Context) (*ItemCategory, error) {
	var (
		err  error
		node *ItemCategory
	)
	icuo.defaults()
	if len(icuo.hooks) == 0 {
		node, err = icuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			icuo.mutation = mutation
			node, err = icuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(icuo.hooks) - 1; i >= 0; i-- {
			if icuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = icuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, icuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (icuo *ItemCategoryUpdateOne) SaveX(ctx context.Context) *ItemCategory {
	node, err := icuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (icuo *ItemCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := icuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icuo *ItemCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := icuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icuo *ItemCategoryUpdateOne) defaults() {
	if _, ok := icuo.mutation.UpdateTime(); !ok {
		v := itemcategory.UpdateDefaultUpdateTime()
		icuo.mutation.SetUpdateTime(v)
	}
}

func (icuo *ItemCategoryUpdateOne) sqlSave(ctx context.Context) (_node *ItemCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemcategory.Table,
			Columns: itemcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemcategory.FieldID,
			},
		},
	}
	id, ok := icuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ItemCategory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := icuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, itemcategory.FieldID)
		for _, f := range fields {
			if !itemcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != itemcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := icuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemcategory.FieldUpdateTime,
		})
	}
	if value, ok := icuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemcategory.FieldName,
		})
	}
	if icuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemsTable,
			Columns: []string{itemcategory.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !icuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemsTable,
			Columns: []string{itemcategory.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   itemcategory.ItemsTable,
			Columns: []string{itemcategory.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ItemCategory{config: icuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, icuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
