// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-web/lesson/chapter6_1/repository/ent/goods"
	"go-web/lesson/chapter6_1/repository/ent/goodscategory"
	"go-web/lesson/chapter6_1/repository/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GoodsCategoryUpdate is the builder for updating GoodsCategory entities.
type GoodsCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *GoodsCategoryMutation
}

// Where appends a list predicates to the GoodsCategoryUpdate builder.
func (gcu *GoodsCategoryUpdate) Where(ps ...predicate.GoodsCategory) *GoodsCategoryUpdate {
	gcu.mutation.Where(ps...)
	return gcu
}

// SetName sets the "name" field.
func (gcu *GoodsCategoryUpdate) SetName(s string) *GoodsCategoryUpdate {
	gcu.mutation.SetName(s)
	return gcu
}

// AddGoodIDs adds the "goods" edge to the Goods entity by IDs.
func (gcu *GoodsCategoryUpdate) AddGoodIDs(ids ...int) *GoodsCategoryUpdate {
	gcu.mutation.AddGoodIDs(ids...)
	return gcu
}

// AddGoods adds the "goods" edges to the Goods entity.
func (gcu *GoodsCategoryUpdate) AddGoods(g ...*Goods) *GoodsCategoryUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gcu.AddGoodIDs(ids...)
}

// Mutation returns the GoodsCategoryMutation object of the builder.
func (gcu *GoodsCategoryUpdate) Mutation() *GoodsCategoryMutation {
	return gcu.mutation
}

// ClearGoods clears all "goods" edges to the Goods entity.
func (gcu *GoodsCategoryUpdate) ClearGoods() *GoodsCategoryUpdate {
	gcu.mutation.ClearGoods()
	return gcu
}

// RemoveGoodIDs removes the "goods" edge to Goods entities by IDs.
func (gcu *GoodsCategoryUpdate) RemoveGoodIDs(ids ...int) *GoodsCategoryUpdate {
	gcu.mutation.RemoveGoodIDs(ids...)
	return gcu
}

// RemoveGoods removes "goods" edges to Goods entities.
func (gcu *GoodsCategoryUpdate) RemoveGoods(g ...*Goods) *GoodsCategoryUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gcu.RemoveGoodIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gcu *GoodsCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gcu.defaults()
	if len(gcu.hooks) == 0 {
		affected, err = gcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gcu.mutation = mutation
			affected, err = gcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gcu.hooks) - 1; i >= 0; i-- {
			if gcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gcu *GoodsCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := gcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gcu *GoodsCategoryUpdate) Exec(ctx context.Context) error {
	_, err := gcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcu *GoodsCategoryUpdate) ExecX(ctx context.Context) {
	if err := gcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcu *GoodsCategoryUpdate) defaults() {
	if _, ok := gcu.mutation.UpdateTime(); !ok {
		v := goodscategory.UpdateDefaultUpdateTime()
		gcu.mutation.SetUpdateTime(v)
	}
}

func (gcu *GoodsCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodscategory.Table,
			Columns: goodscategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodscategory.FieldID,
			},
		},
	}
	if ps := gcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodscategory.FieldUpdateTime,
		})
	}
	if value, ok := gcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodscategory.FieldName,
		})
	}
	if gcu.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodscategory.GoodsTable,
			Columns: []string{goodscategory.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goods.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcu.mutation.RemovedGoodsIDs(); len(nodes) > 0 && !gcu.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodscategory.GoodsTable,
			Columns: []string{goodscategory.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcu.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodscategory.GoodsTable,
			Columns: []string{goodscategory.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodscategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GoodsCategoryUpdateOne is the builder for updating a single GoodsCategory entity.
type GoodsCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodsCategoryMutation
}

// SetName sets the "name" field.
func (gcuo *GoodsCategoryUpdateOne) SetName(s string) *GoodsCategoryUpdateOne {
	gcuo.mutation.SetName(s)
	return gcuo
}

// AddGoodIDs adds the "goods" edge to the Goods entity by IDs.
func (gcuo *GoodsCategoryUpdateOne) AddGoodIDs(ids ...int) *GoodsCategoryUpdateOne {
	gcuo.mutation.AddGoodIDs(ids...)
	return gcuo
}

// AddGoods adds the "goods" edges to the Goods entity.
func (gcuo *GoodsCategoryUpdateOne) AddGoods(g ...*Goods) *GoodsCategoryUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gcuo.AddGoodIDs(ids...)
}

// Mutation returns the GoodsCategoryMutation object of the builder.
func (gcuo *GoodsCategoryUpdateOne) Mutation() *GoodsCategoryMutation {
	return gcuo.mutation
}

// ClearGoods clears all "goods" edges to the Goods entity.
func (gcuo *GoodsCategoryUpdateOne) ClearGoods() *GoodsCategoryUpdateOne {
	gcuo.mutation.ClearGoods()
	return gcuo
}

// RemoveGoodIDs removes the "goods" edge to Goods entities by IDs.
func (gcuo *GoodsCategoryUpdateOne) RemoveGoodIDs(ids ...int) *GoodsCategoryUpdateOne {
	gcuo.mutation.RemoveGoodIDs(ids...)
	return gcuo
}

// RemoveGoods removes "goods" edges to Goods entities.
func (gcuo *GoodsCategoryUpdateOne) RemoveGoods(g ...*Goods) *GoodsCategoryUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gcuo.RemoveGoodIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gcuo *GoodsCategoryUpdateOne) Select(field string, fields ...string) *GoodsCategoryUpdateOne {
	gcuo.fields = append([]string{field}, fields...)
	return gcuo
}

// Save executes the query and returns the updated GoodsCategory entity.
func (gcuo *GoodsCategoryUpdateOne) Save(ctx context.Context) (*GoodsCategory, error) {
	var (
		err  error
		node *GoodsCategory
	)
	gcuo.defaults()
	if len(gcuo.hooks) == 0 {
		node, err = gcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodsCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gcuo.mutation = mutation
			node, err = gcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gcuo.hooks) - 1; i >= 0; i-- {
			if gcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gcuo *GoodsCategoryUpdateOne) SaveX(ctx context.Context) *GoodsCategory {
	node, err := gcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gcuo *GoodsCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := gcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcuo *GoodsCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := gcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcuo *GoodsCategoryUpdateOne) defaults() {
	if _, ok := gcuo.mutation.UpdateTime(); !ok {
		v := goodscategory.UpdateDefaultUpdateTime()
		gcuo.mutation.SetUpdateTime(v)
	}
}

func (gcuo *GoodsCategoryUpdateOne) sqlSave(ctx context.Context) (_node *GoodsCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodscategory.Table,
			Columns: goodscategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goodscategory.FieldID,
			},
		},
	}
	id, ok := gcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GoodsCategory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodscategory.FieldID)
		for _, f := range fields {
			if !goodscategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodscategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodscategory.FieldUpdateTime,
		})
	}
	if value, ok := gcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodscategory.FieldName,
		})
	}
	if gcuo.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodscategory.GoodsTable,
			Columns: []string{goodscategory.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goods.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcuo.mutation.RemovedGoodsIDs(); len(nodes) > 0 && !gcuo.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodscategory.GoodsTable,
			Columns: []string{goodscategory.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcuo.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goodscategory.GoodsTable,
			Columns: []string{goodscategory.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: goods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GoodsCategory{config: gcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodscategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
